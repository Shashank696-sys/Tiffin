Build a complete Tiffin Service Website using MongoDB, Express, React, and Node.js.

üí° Goal:
Create a 3-role web app (Admin, Seller, Customer) where:
- Sellers can register and list their tiffins.
- Customers can browse and book tiffins.
- Admin can manage and control all sellers and bookings.

üß† Requirements:
Use MongoDB + Mongoose for database.
Use JWT authentication.
Use Nodemailer for email notifications.
All panels must be mobile responsive and clean (Tailwind or Bootstrap UI).

---

üë§ USER ROLES

1Ô∏è‚É£ **Admin Panel**
- Secure login for admin.
- View all registered sellers.
- Approve, Suspend, or Reactivate seller accounts.
- View all bookings from customers.
- Manage and delete any tiffin listings.
- Simple dashboard showing total sellers, total tiffins, and total bookings.

2Ô∏è‚É£ **Seller Panel**
- Register/Login as Seller.
- Add, edit, or delete tiffin listings with fields:
  - Title
  - Description
  - Category (Veg/Non-Veg/Jain)
  - Price
  - Delivery Time Slots
  - Available Days
  - Contact Number
  - Shop Location
- View all their bookings.
- Update their profile info (shop name, address, etc.)
- Status message visible if account is suspended (cannot add tiffins until active).

3Ô∏è‚É£ **Customer Side**
- Register/Login.
- Browse all approved sellers and their tiffin menus.
- Filter by location, category, and price.
- View tiffin details and book one with:
  - Name, Email, Phone
  - Delivery address
  - Date and time slot
  - Quantity
- On booking, an email is sent to both seller and customer with booking details.

---

üóÇÔ∏è DATABASE MODELS (MongoDB + Mongoose)

**User Model:**
- name, email, phone, password, role (admin/seller/customer), createdAt

**Seller Model:**
- userId (ref: User)
- shopName, address, city, contactNumber
- status: [pending, active, suspended]
- createdAt

**Tiffin Model:**
- sellerId (ref: Seller)
- title, description, category, price, availableDays[], slots[], imageUrl
- createdAt

**Booking Model:**
- customerName, customerEmail, customerPhone
- tiffinId (ref: Tiffin)
- sellerId (ref: Seller)
- date, slot, quantity, totalPrice
- status: [Pending, Confirmed, Cancelled]
- createdAt

---

üîê API ENDPOINTS (Express)

**Auth Routes**
- POST /api/auth/register
- POST /api/auth/login

**Seller Routes**
- GET /api/seller/tiffins ‚Üí get all tiffins for seller
- POST /api/seller/tiffins ‚Üí add new tiffin
- PUT /api/seller/tiffins/:id ‚Üí edit tiffin
- DELETE /api/seller/tiffins/:id ‚Üí delete tiffin
- GET /api/seller/bookings ‚Üí view bookings for seller

**Admin Routes**
- GET /api/admin/sellers ‚Üí list all sellers
- PUT /api/admin/sellers/:id/status ‚Üí approve/suspend/reactivate
- GET /api/admin/bookings ‚Üí list all bookings

**Customer Routes**
- GET /api/sellers ‚Üí show only active sellers
- GET /api/sellers/:id/tiffins ‚Üí seller menu
- POST /api/bookings ‚Üí create booking

---

üìß EMAIL FLOW (Nodemailer Gmail SMTP)
- On booking:
  - Email to seller ‚Üí includes customer name, phone, address, and tiffin details.
  - Email to customer ‚Üí confirmation message and seller contact info.
- On admin approval/suspension:
  - Email to seller ‚Üí account approved or suspended notice.

---

üé® UI REQUIREMENTS
Use React with Tailwind CSS.
Responsive design for mobile and desktop.
Pages:
- Landing page ‚Üí show all sellers and their menus.
- Login/Register (for admin, seller, and customer).
- Admin dashboard ‚Üí seller management and booking stats.
- Seller dashboard ‚Üí tiffin management and booking list.
- Customer booking page ‚Üí booking form + history.

---

‚öôÔ∏è ADDITIONAL INSTRUCTIONS
- Use JWT-based auth middleware for route protection.
- Use Mongoose models for all DB operations.
- Store images (optional) with Cloudinary.
- Use `.env` for MONGO_URI, JWT_SECRET, and SMTP creds.
- Show toast alerts for success/error (frontend).
- Admin panel at `/admin`, Seller dashboard at `/seller/dashboard`.

Generate clean, modular MERN app code with these features and connected MongoDB backend.